---
import MainLayout from "../layouts/MainLayout.astro";
import type Photo from "../models/Photo";

const ENV = import.meta.env;

const photosPerColumn = 3;
const photoList = await fetch(ENV.API + "/photograph")
  .then((resp) => resp.json())
  .catch((err) => console.log("ERRORR"))
  .then((data: Photo[]) => {
    const splitPhotos: Photo[][] = [];

    let photos: Photo[] = data;

    let tmpCol: Photo[] = [];
    let cnt = 0;

    while (photos.length > 0) {
      let photo: Photo = photos[0];
      let pnt = photo.isLandscape ? 1 : 2;

      if (photosPerColumn - (cnt + pnt) >= 0) {
        //fits in column
        tmpCol.push(photo);
        cnt += pnt;
        photos.shift();
      } else if (photos.length == 1) {
        //last one just add
        tmpCol.push(photo);
        photos = [];
        splitPhotos.push(tmpCol);
      } else if (cnt == photosPerColumn) {
        //full column
        splitPhotos.push(tmpCol);
        tmpCol = [];
        cnt = 0;
      } else {
        //does not fit, still room left, move photo back in array
        photos.shift();
        photos.push(photo);
      }

      if (photos.length <= 0) {
        splitPhotos.push(tmpCol);
        break;
      }
    }

    return splitPhotos;
  });
---

<MainLayout title="Photography">
  <div class="p-2 flex flex-col items-center">
    <h1 class="text-4xl">Photography</h1>
    <p class="text-lg mt-4 max-w-2xl">
      Here are some photographs I have taken, mainly using analog cameras, but some digital as well.
      My main goal is just to get out more and do something different, less digital. I develop my
      own negatives and scan them on my Plustek 8200i scanner and a Canonscan 8800f. Most photos are
      artistically bad but I like them, they can best be described with this AI quote:
    </p>
    <p class="mt-4 text-lg italic">
      "I may not capture greatness in every frame, but these photographs are my humble expressions,
      woven with the threads of my unique perspective." - chat GPT
    </p>
  </div>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-4 justify-center">
    {
      photoList.map((col: Photo[]) => (
        <div class="grid gap-4">
          {col.map((photo: Photo) => (
            <div
              class="h-auto max-w-full rounded-lg photo-thumbnail cursor-pointer"
              data-photo={JSON.stringify(photo)}
              data-api={ENV.API.toString()}
            >
              <img
                class="rounded-lg h-full max-w-full"
                width="1080"
                height="1920"
                src={ENV.API + "/photograph/photo/" + photo.id + "/image/true"}
                alt={photo.title}
              />
              <div class="opacity-0 hover:opacity-100 transition-opacity relative -top-full w-full h-full bg-white bg-opacity-40 rounded-lg text-center">
                <p class="absolute top-1/2 w-full text-center text-xl">{photo.title}</p>
              </div>
            </div>
          ))}
        </div>
      ))
    }
  </div>

  <!-- HD image modal -->
  <div class="fixed z-[99999999999] inset-0 overflow-y-auto" id="photoModal">
    <div class="flex items-center justify-center min-h-screen px-4">
      <!-- Gray background -->
      <div id="photoModalBackground" class="fixed inset-0 bg-gray-800 opacity-50"></div>
      <!-- content -->
      <div class="bg-white rounded-lg shadow-lg w-auto relative">
        <button
          id="closePhotoModalBtn"
          class="absolute top-2 right-2 text-gray-600 hover:text-gray-800"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <div class="p-4">
          <!-- title -->
          <h2 id="photoModalTitle" class="text-2xl font-bold mb-2"></h2>
          <!-- hd image -->
          <img
            id="photoModalImage"
            src=""
            alt="HD version of selected image"
            class="h-auto max-h-[70vh] mb-4 mx-auto"
          />
          <!-- description -->
          <p id="photoModalDescription" class="text-gray-700 mb-4"></p>
          <!-- more info -->
          <div class="text-gray-500 text-sm">
            <p>
              <strong>Date:</strong>
              <span id="photoModalDate"></span>
            </p>
            <p>
              <strong>Location:</strong>
              <span id="photoModalLocation"></span>
            </p>
            <p>
              <strong>Camera/Film:</strong>
              <span id="photoModalCameraFilm"></span>
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import type Photo from "../models/Photo";
  import { getShotLocationStringFormat } from "../models/Photo";

  document.addEventListener("DOMContentLoaded", function () {
    const photoModal = document.getElementById("photoModal");
    const closePhotoModalBtn = document.getElementById("closePhotoModalBtn");
    const photoModalBackgroud = document.getElementById("photoModalBackground");

    const thumbnails = Array.from(document.getElementsByClassName("photo-thumbnail"));

    thumbnails.forEach((element) => {
      const e = element as HTMLElement;
      const photo: Photo = JSON.parse(e.dataset.photo ?? "");
      const api = e.dataset.api ?? "";
      element.addEventListener("click", () => {
        selectPhoto(photo, api);
        photoModal?.classList.toggle("active");
      });
    });

    photoModalBackgroud?.addEventListener("click", (e) => {
      photoModal?.classList.toggle("active");
      console.log("close by background");
    });

    closePhotoModalBtn?.addEventListener("click", () => {
      photoModal?.classList.toggle("active");
      console.log("close by button");
    });

    function selectPhoto(photo: Photo, api: string) {
      const imageElement = document.getElementById("photoModalImage") as HTMLImageElement;
      const titleElement = document.getElementById("photoModalTitle") as HTMLElement;
      const descriptionElement = document.getElementById("photoModalDescription") as HTMLElement;
      const dateElement = document.getElementById("photoModalDate") as HTMLElement;
      const locationElement = document.getElementById("photoModalLocation") as HTMLElement;
      const cameraFilmElement = document.getElementById("photoModalCameraFilm") as HTMLElement;

      imageElement.src = "";

      imageElement.src = api + "/photograph/photo/" + photo.id + "/image/false";

      titleElement.innerText = photo.title;
      descriptionElement.innerText = photo.description;
      const dateTaken = new Date(photo.dateTaken);
      dateElement.innerText = dateTaken.toLocaleDateString("se-SV", {
        year: "numeric",
        month: "2-digit",
      });
      locationElement.innerText = getShotLocationStringFormat(photo.location);
      cameraFilmElement.innerText = photo.cameraUsed + " / " + photo.filmUsed;
    }
  });
</script>
